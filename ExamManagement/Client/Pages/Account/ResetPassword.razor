@page "/resetpassword"
@layout EmptyLayout
@inject AccountGrpcService.AccountGrpcServiceClient _grpcClient;

<MudContainer Style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%);">
    <EditForm Model="@resetPasswordViewModel" OnValidSubmit="ResetYourPassword">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Continue to reset your password</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText Color="Color.Error" Typo="Typo.body2">@error</MudText>
            <MudTextField Immediate="true" Label="New Password" For="@(()=>resetPasswordViewModel.NewPassword)" @bind-Value="resetPasswordViewModel.NewPassword" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" RequiredError="@passError" InputType="InputType.Password" Class="mt-3" AutoFocus="@true"></MudTextField>
            <MudTextField Immediate="true" Label="Confirm New Password" For="@(()=> resetPasswordViewModel.ConfirmNewPassword)" @bind-Value="resetPasswordViewModel.ConfirmNewPassword" InputType="InputType.Password" Class="mt-3"></MudTextField>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Disabled="@ResetButton" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if (ResetButton)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Resetting</MudText>
                        }
                        else
                        {
                            <MudText>Reset</MudText>
                        }
                </MudButton>
            </MudCardActions>
        </MudCardContent>
    </EditForm>
</MudContainer>

@code {
    ResetPasswordViewModel resetPasswordViewModel = new ResetPasswordViewModel();
    bool ResetButton = false;
    string passError = "";
    string error = "";

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            passError = "Password is required!";
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
        {
            passError = "Password must be at least of length 8";
            yield return "Password must be at least of length 8";
        }
        if (!Regex.IsMatch(pw, @"[A-Z]"))
        {
            passError = "Password must contain at least one capital letter";
            yield return "Password must contain at least one capital letter";
        }
        if (!Regex.IsMatch(pw, @"[a-z]"))
        {
            passError = "Password must contain at least one lowercase letter";
            yield return "Password must contain at least one lowercase letter";
        }
        if (!Regex.IsMatch(pw, @"[0-9]"))
        {
            passError = "Password must contain at least one digit";
            yield return "Password must contain at least one digit";
        }
    }

    protected override void OnInitialized()
    {
        var uri = _navigate.ToAbsoluteUri(_navigate.Uri);
        var queries = QueryHelpers.ParseQuery(uri.Query);
        if (queries.Count < 0)
        {
            _navigate.NavigateTo("/Account/login");
        }
        else
        {
            resetPasswordViewModel.UserId = queries["uid"];
            resetPasswordViewModel.ResetPasswordToken = queries["token"];
        }
    }

    async Task ResetYourPassword(EditContext context) 
    { 
        ResetButton = true;
        var passwordResult = await _grpcClient.ResetUserPasswordAsync(new ResetPasswordMessage
        {
            Password = resetPasswordViewModel.NewPassword,
            UserId = resetPasswordViewModel.UserId,
            ResetPasswordToken = resetPasswordViewModel.ResetPasswordToken
        });

        if (!passwordResult.Success)
        {
            if (passwordResult.PasswordResetErrorType == ResetPasswordResultMessage.Types.ResetPasswordErrorType.NoSuchUserFound)
            {
                error = "User you are trying to reset password for is not found";
                ResetButton = false;
            }
            else if (passwordResult.PasswordResetErrorType == ResetPasswordResultMessage.Types.ResetPasswordErrorType.InvalidToken)
            {
                error = "The token that was sent to your email seems to be invalid.";
                ResetButton = false;
            }
            else if (passwordResult.PasswordResetErrorType == ResetPasswordResultMessage.Types.ResetPasswordErrorType.CouldNotResetPassword)
            {
                error = "We couldn't reset your password due to an internal error.";
                ResetButton = false;
            }
        }
        if (passwordResult.Success && passwordResult.PasswordResetErrorType == ResetPasswordResultMessage.Types.ResetPasswordErrorType.NoAnyError)
        {
            _navigate.NavigateTo("/Account/Login");
            Snackbar.Add("Your password has been successfully changed.", Severity.Success);
        }
    }

}
